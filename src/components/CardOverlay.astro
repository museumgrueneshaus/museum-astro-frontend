---
export interface Props {
  title: string;
  blurb?: string;
  meta?: string;
  image?: string;
  href?: string;
  ratio?: string; // e.g. '3 / 2', '4 / 3', '1 / 1', '16 / 9', 'auto'
  fit?: 'cover' | 'contain';
  natural?: boolean; // if true, derive aspect from image intrinsic size on load
  colors?: string[]; // category color(s) to render as right-side indicator
}

const { title, blurb = '', meta = '', image = '/placeholder.jpg', href = '#', ratio = '4 / 3', fit = 'contain', natural = true, colors = [] } = Astro.props as Props;

function barStyle(cols: string[]) {
  if (!cols || cols.length === 0) return undefined;
  const safe = cols.map(c => (c?.startsWith('#') ? c : `#${c || '000000'}`));
  if (safe.length === 1) return `background:${safe[0]}`;
  const step = 100 / safe.length;
  const stops = safe.map((c, i) => `${c} ${Math.round(i*step)}% ${Math.round((i+1)*step)}%`).join(',');
  return `background: linear-gradient(to bottom, ${stops})`;
}
---

<a class={"card touchable " + (ratio === 'auto' ? 'ratio-auto' : '')} data-natural={natural ? 'true' : 'false'} href={href} aria-label={title} style={`--ratio:${ratio}; --fit:${fit};`}>
  <div class="media">
    <img src={image} alt={title} loading="lazy" decoding="async" />
  </div>
  {colors && colors.length > 0 && (<div class="cat-bar" style={barStyle(colors)} aria-hidden="true" />)}
  <div class="overlay">
    <div class="title">{title}</div>
    {blurb && (<div class="blurb">{blurb}</div>)}
    {meta && (<div class="meta">{meta}</div>)}
  </div>
</a>

<style>
  .card { display:block; position: relative; aspect-ratio: var(--ratio, 3 / 2); background: var(--bg-alt); border: 1px solid var(--border); overflow: hidden; color: inherit; text-decoration: none; }
  .card.ratio-auto { aspect-ratio: auto; }
  .media { position: absolute; inset: 0; background: #000; }
  .media img { width: 100%; height: 100%; object-fit: var(--fit, contain); object-position: top center; display: block; }
  .overlay { position: absolute; left: 0; right: 0; bottom: 0; padding: 14px 16px; color: #fff; background: linear-gradient(0deg, rgba(0,0,0,.72) 0%, rgba(0,0,0,.4) 55%, rgba(0,0,0,0) 100%); }
  .cat-bar { position: absolute; top: 0; right: 0; width: 6px; height: 100%; }
  .title { font-weight: 800; line-height: 1.2; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; }
  .blurb { margin-top: 6px; color: #e5e5e5; font-size: .95em; line-height: 1.35; display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; overflow: hidden; }
  .meta { margin-top: 8px; font-size: .8em; letter-spacing: .06em; text-transform: uppercase; opacity: .9; }
  .card:focus-visible { outline: 3px solid var(--primary-acc); outline-offset: 3px; }
</style>

<script>
  // Derive aspect ratio from image if natural mode enabled
  const card = document.currentScript?.parentElement;
  const natural = card?.getAttribute('data-natural') === 'true';
  if (natural && card) {
    const img = card.querySelector('img');
    const setRatio = () => {
      if (img && img.naturalWidth && img.naturalHeight) {
        card.style.setProperty('--ratio', `${img.naturalWidth} / ${img.naturalHeight}`);
      }
    };
    if (img?.complete) setRatio(); else img?.addEventListener('load', setRatio, { once: true });
  }
</script>
