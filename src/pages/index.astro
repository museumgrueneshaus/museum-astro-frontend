---
// src/pages/index.astro
export const prerender = true; // Explicitly mark as static

import Layout from '../layouts/Layout.astro';
import ExponatCard from '../components/ExponatCard.astro';
import { getExponate, getKioskConfig, getMuseumInfo } from '../lib/sanity';

// For static generation, we use default config
const kioskConfig = await getKioskConfig('default');
const museumInfo = await getMuseumInfo();

// Exponate basierend auf Kiosk-Modus laden
let exponate = [];
let pageTitle = museumInfo?.name || 'Museum Digital';

switch(kioskConfig?.modus) {
  case 'slideshow':
    exponate = kioskConfig.konfiguration?.slideshow_settings?.exponate || 
               await getExponate({ highlight: true });
    break;
  case 'category':
    const categoryId = kioskConfig.konfiguration?.category_settings?.kategorie?._ref;
    exponate = await getExponate({ category: categoryId });
    break;
  case 'explorer':
  default:
    const explorerSettings = kioskConfig?.konfiguration?.explorer_settings;
    exponate = await getExponate({
      highlight: explorerSettings?.nur_highlights,
      categories: explorerSettings?.kategorien,
      limit: explorerSettings?.items_pro_seite || 12
    });
}

// Theme aus Config
const theme = kioskConfig?.design?.theme || 'default';
const primaryColor = kioskConfig?.design?.primaerfarbe || '#667eea';
---

<Layout title={pageTitle} theme={theme}>
  <div class="kiosk-app" data-mode={kioskConfig?.modus || 'explorer'}>
    <!-- Header -->
    <header class="kiosk-header">
      <div class="header-content">
        {museumInfo?.logo && (
          <img src={museumInfo.logo} alt={museumInfo.name} class="museum-logo" />
        )}
        <h1>{pageTitle}</h1>
        {museumInfo?.untertitel && (
          <p class="subtitle">{museumInfo.untertitel}</p>
        )}
      </div>
      
      <!-- Mode Switcher (wenn erlaubt) -->
      <nav class="mode-switcher" data-kiosk-modes>
        <button data-mode="explorer" class="mode-btn active">
          <span class="icon">üîç</span>
          <span>Entdecken</span>
        </button>
        <button data-mode="slideshow" class="mode-btn">
          <span class="icon">üé¨</span>
          <span>Slideshow</span>
        </button>
        <button data-mode="scan" class="mode-btn">
          <span class="icon">üì∑</span>
          <span>QR Scan</span>
        </button>
      </nav>

      <!-- Language Switcher -->
      {kioskConfig?.funktionen?.sprachen?.length > 1 && (
        <div class="language-switcher">
          {kioskConfig.funktionen.sprachen.map(lang => (
            <button data-lang={lang} class="lang-btn">
              {lang.toUpperCase()}
            </button>
          ))}
        </div>
      )}
    </header>

    <!-- Main Content -->
    <main class="kiosk-main">
      <!-- Explorer Mode -->
      <section class="mode-content explorer-mode active" data-mode-content="explorer">
        <div class="filters">
          <button class="filter-btn active" data-filter="all">Alle</button>
          <button class="filter-btn" data-filter="highlights">Highlights</button>
          <!-- Kategorien dynamisch -->
        </div>

        <div class="exponate-grid">
          {exponate.map(exponat => (
            <ExponatCard exponat={exponat} showQR={kioskConfig?.funktionen?.zeige_qr_codes} />
          ))}
        </div>

        {exponate.length === 0 && (
          <div class="empty-state">
            <p>Keine Exponate gefunden</p>
          </div>
        )}
      </section>

      <!-- Slideshow Mode -->
      <section class="mode-content slideshow-mode" data-mode-content="slideshow">
        <div class="slideshow-container">
          <div class="slideshow-track">
            {exponate.map((exponat, index) => (
              <div class="slide" data-slide={index}>
                <div class="slide-image">
                  {exponat.hauptbild && (
                    <img src={exponat.hauptbild} alt={exponat.titel} />
                  )}
                </div>
                <div class="slide-info">
                  <h2>{exponat.titel}</h2>
                  <p class="inv-nr">{exponat.inventarnummer}</p>
                  <p>{exponat.kurzbeschreibung}</p>
                </div>
              </div>
            ))}
          </div>
          <div class="slideshow-controls">
            <button class="prev-btn">‚Üê</button>
            <button class="play-pause-btn">‚è∏</button>
            <button class="next-btn">‚Üí</button>
          </div>
          <div class="slideshow-dots">
            {exponate.map((_, index) => (
              <span class="dot" data-dot={index}></span>
            ))}
          </div>
        </div>
      </section>

      <!-- QR Scanner Mode -->
      <section class="mode-content scanner-mode" data-mode-content="scan">
        <div class="scanner-container">
          <div class="scanner-viewport">
            <video id="scanner-video"></video>
            <div class="scanner-overlay">
              <div class="scanner-frame"></div>
            </div>
          </div>
          <div class="scanner-info">
            <h2>QR-Code scannen</h2>
            <p>Halten Sie den QR-Code vor die Kamera</p>
          </div>
        </div>
      </section>
    </main>

    <!-- Footer Info -->
    <footer class="kiosk-footer">
      <div class="footer-info">
        {kioskConfig?.funktionen?.zeige_uhr && (
          <div class="clock" id="clock">12:00</div>
        )}
        <div class="status">
          <span class="status-dot online"></span>
          <span id="status-text">Online</span>
        </div>
      </div>
    </footer>

    <!-- Idle Overlay -->
    <div class="idle-overlay" id="idle-overlay">
      <div class="idle-content">
        <h2>Ber√ºhren Sie den Bildschirm</h2>
        <p>um fortzufahren</p>
      </div>
    </div>
  </div>

  <style define:vars={{ primaryColor }}>
    .kiosk-app {
      width: 100vw;
      height: 100vh;
      display: flex;
      flex-direction: column;
      background: linear-gradient(135deg, var(--primaryColor) 0%, #764ba2 100%);
      font-family: system-ui, -apple-system, sans-serif;
      overflow: hidden;
      user-select: none;
      -webkit-user-select: none;
      -webkit-touch-callout: none;
    }

    /* Header */
    .kiosk-header {
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      padding: 1.5rem;
      color: white;
      border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .header-content {
      text-align: center;
      margin-bottom: 1rem;
    }

    .museum-logo {
      height: 60px;
      margin-bottom: 0.5rem;
    }

    .kiosk-header h1 {
      font-size: 2rem;
      margin: 0;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    }

    .subtitle {
      opacity: 0.9;
      margin-top: 0.5rem;
    }

    /* Mode Switcher */
    .mode-switcher {
      display: flex;
      gap: 1rem;
      justify-content: center;
      flex-wrap: wrap;
    }

    .mode-btn {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      background: rgba(255, 255, 255, 0.1);
      border: 2px solid rgba(255, 255, 255, 0.3);
      color: white;
      border-radius: 30px;
      cursor: pointer;
      transition: all 0.3s;
      font-size: 1rem;
    }

    .mode-btn:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: translateY(-2px);
    }

    .mode-btn.active {
      background: white;
      color: var(--primaryColor);
      border-color: white;
    }

    .mode-btn .icon {
      font-size: 1.25rem;
    }

    /* Main Content */
    .kiosk-main {
      flex: 1;
      overflow: hidden;
      position: relative;
    }

    .mode-content {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s, visibility 0.3s;
      overflow-y: auto;
      padding: 2rem;
    }

    .mode-content.active {
      opacity: 1;
      visibility: visible;
    }

    /* Explorer Mode */
    .filters {
      display: flex;
      gap: 1rem;
      margin-bottom: 2rem;
      justify-content: center;
    }

    .filter-btn {
      padding: 0.5rem 1.5rem;
      background: rgba(255, 255, 255, 0.2);
      border: none;
      color: white;
      border-radius: 20px;
      cursor: pointer;
      transition: all 0.3s;
    }

    .filter-btn.active {
      background: white;
      color: var(--primaryColor);
    }

    .exponate-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 2rem;
      animation: fadeIn 0.5s;
    }

    /* Slideshow Mode */
    .slideshow-container {
      height: 100%;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    .slideshow-track {
      position: relative;
      width: 100%;
      max-width: 1200px;
      height: 70%;
    }

    .slide {
      position: absolute;
      width: 100%;
      height: 100%;
      display: flex;
      gap: 3rem;
      align-items: center;
      opacity: 0;
      transition: opacity 1s;
    }

    .slide.active {
      opacity: 1;
    }

    .slide-image {
      flex: 1;
      height: 100%;
    }

    .slide-image img {
      width: 100%;
      height: 100%;
      object-fit: contain;
      border-radius: 15px;
    }

    .slide-info {
      flex: 1;
      color: white;
    }

    .slide-info h2 {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .slideshow-controls {
      display: flex;
      gap: 2rem;
      margin-top: 2rem;
    }

    .slideshow-controls button {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      background: white;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      transition: transform 0.3s;
    }

    .slideshow-controls button:hover {
      transform: scale(1.1);
    }

    .slideshow-dots {
      display: flex;
      gap: 0.5rem;
      margin-top: 1rem;
    }

    .dot {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.5);
      cursor: pointer;
      transition: background 0.3s;
    }

    .dot.active {
      background: white;
    }

    /* Scanner Mode */
    .scanner-container {
      height: 100%;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    .scanner-viewport {
      position: relative;
      width: 100%;
      max-width: 500px;
      height: 500px;
    }

    #scanner-video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 15px;
    }

    .scanner-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
    }

    .scanner-frame {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 250px;
      height: 250px;
      border: 3px solid white;
      border-radius: 15px;
      animation: pulse 2s infinite;
    }

    .scanner-info {
      text-align: center;
      color: white;
      margin-top: 2rem;
    }

    /* Footer */
    .kiosk-footer {
      background: rgba(0, 0, 0, 0.2);
      padding: 1rem;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
    }

    .footer-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      color: white;
    }

    .clock {
      font-size: 1.25rem;
      font-weight: 500;
    }

    .status {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .status-dot {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background: #4CAF50;
      animation: pulse 2s infinite;
    }

    .status-dot.offline {
      background: #FF9800;
    }

    /* Idle Overlay */
    .idle-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.9);
      display: flex;
      justify-content: center;
      align-items: center;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.5s, visibility 0.5s;
      z-index: 9999;
    }

    .idle-overlay.active {
      opacity: 1;
      visibility: visible;
    }

    .idle-content {
      text-align: center;
      color: white;
    }

    .idle-content h2 {
      font-size: 3rem;
      margin-bottom: 1rem;
      animation: pulse 2s infinite;
    }

    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    /* Touch optimizations */
    @media (pointer: coarse) {
      .mode-btn {
        padding: 1rem 2rem;
        font-size: 1.125rem;
      }

      .exponate-grid {
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
      }
    }

    /* Responsive */
    @media (max-width: 768px) {
      .kiosk-header h1 {
        font-size: 1.5rem;
      }

      .mode-switcher {
        gap: 0.5rem;
      }

      .mode-btn span:not(.icon) {
        display: none;
      }

      .slide {
        flex-direction: column;
      }
    }
  </style>

  <script>
    // Clock Update
    function updateClock() {
      const clock = document.getElementById('clock');
      if (clock) {
        const now = new Date();
        clock.textContent = now.toLocaleTimeString('de-DE', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
      }
    }
    setInterval(updateClock, 1000);
    updateClock();

    // Mode Switching
    const modeBtns = document.querySelectorAll('.mode-btn');
    const modeContents = document.querySelectorAll('.mode-content');
    
    modeBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const mode = btn.dataset.mode;
        
        // Update buttons
        modeBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        // Update content
        modeContents.forEach(content => {
          content.classList.remove('active');
          if (content.dataset.modeContent === mode) {
            content.classList.add('active');
          }
        });

        // Special handling for slideshow
        if (mode === 'slideshow') {
          startSlideshow();
        } else {
          stopSlideshow();
        }

        // Special handling for scanner
        if (mode === 'scan') {
          startScanner();
        } else {
          stopScanner();
        }
      });
    });

    // Slideshow
    let slideshowInterval;
    let currentSlide = 0;
    const slides = document.querySelectorAll('.slide');
    const dots = document.querySelectorAll('.dot');

    function showSlide(index) {
      slides.forEach(s => s.classList.remove('active'));
      dots.forEach(d => d.classList.remove('active'));
      
      if (slides[index]) {
        slides[index].classList.add('active');
      }
      if (dots[index]) {
        dots[index].classList.add('active');
      }
      
      currentSlide = index;
    }

    function nextSlide() {
      currentSlide = (currentSlide + 1) % slides.length;
      showSlide(currentSlide);
    }

    function prevSlide() {
      currentSlide = (currentSlide - 1 + slides.length) % slides.length;
      showSlide(currentSlide);
    }

    function startSlideshow() {
      showSlide(0);
      slideshowInterval = setInterval(nextSlide, 10000); // 10 seconds
    }

    function stopSlideshow() {
      clearInterval(slideshowInterval);
    }

    // Slideshow controls
    document.querySelector('.prev-btn')?.addEventListener('click', () => {
      stopSlideshow();
      prevSlide();
    });

    document.querySelector('.next-btn')?.addEventListener('click', () => {
      stopSlideshow();
      nextSlide();
    });

    document.querySelector('.play-pause-btn')?.addEventListener('click', (e) => {
      if (slideshowInterval) {
        stopSlideshow();
        e.target.textContent = '‚ñ∂';
      } else {
        startSlideshow();
        e.target.textContent = '‚è∏';
      }
    });

    // QR Scanner (placeholder - needs real implementation)
    function startScanner() {
      console.log('Scanner w√ºrde hier starten');
      // Implement with QR scanner library
    }

    function stopScanner() {
      console.log('Scanner gestoppt');
    }

    // Idle detection
    let idleTimer;
    const idleTimeout = 300000; // 5 minutes
    const idleOverlay = document.getElementById('idle-overlay');

    function resetIdleTimer() {
      clearTimeout(idleTimer);
      idleOverlay?.classList.remove('active');
      
      idleTimer = setTimeout(() => {
        idleOverlay?.classList.add('active');
      }, idleTimeout);
    }

    // Reset on any interaction
    ['touchstart', 'mousedown', 'keypress'].forEach(event => {
      document.addEventListener(event, resetIdleTimer);
    });

    resetIdleTimer();

    // Online/Offline detection
    function updateOnlineStatus() {
      const statusDot = document.querySelector('.status-dot');
      const statusText = document.getElementById('status-text');
      
      if (navigator.onLine) {
        statusDot?.classList.remove('offline');
        statusDot?.classList.add('online');
        if (statusText) statusText.textContent = 'Online';
      } else {
        statusDot?.classList.remove('online');
        statusDot?.classList.add('offline');
        if (statusText) statusText.textContent = 'Offline';
      }
    }

    window.addEventListener('online', updateOnlineStatus);
    window.addEventListener('offline', updateOnlineStatus);
    updateOnlineStatus();

    // Service Worker for offline support
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/sw.js').catch(console.error);
    }
  </script>
</Layout>
---