---
import Layout from '../layouts/Layout.astro';
import { getKioskConfig, getMuseumInfo } from '../lib/sanity';

const kioskConfig = await getKioskConfig('default').catch(() => null);
const museumInfo = await getMuseumInfo().catch(() => ({ name: 'Museum Digital' }));

const pageTitle = `${museumInfo?.name || 'Museum'} – QR Scan`;
const theme = kioskConfig?.design?.theme || 'default';
---

<Layout title={pageTitle} theme={theme}>
  <div class="kiosk-app" data-mode="scan">
    <header class="app-header">
      <div class="container header-bar">
        <div class="brand">
          {museumInfo?.logo && (<img src={museumInfo.logo} alt={museumInfo.name} class="brand-logo" />)}
          <div>
            <div class="brand-title">{museumInfo?.name || 'Museum'}</div>
            {museumInfo?.untertitel && (<div class="brand-subtitle">{museumInfo.untertitel}</div>)}
          </div>
        </div>
        <nav class="segmented" aria-label="Modi">
          <a href="/explorer" class="seg-btn">Entdecken</a>
          <a href="/slideshow" class="seg-btn">Slideshow</a>
          <a href="/scan" class="seg-btn active">QR Scan</a>
        </nav>
        <div></div>
      </div>
    </header>

    <main class="kiosk-main container">
      <div class="scanner-container">
        <div class="scanner-viewport">
          <video id="scanner-video" playsinline></video>
          <div class="scanner-overlay"><div class="scanner-frame"></div></div>
        </div>
        <div class="scanner-info">
          <h2>QR-Code scannen</h2>
          <p>Bitte Kamera-Zugriff erlauben</p>
        </div>
      </div>
    </main>
  </div>

  <style>
    .brand-logo { height: 40px; width: auto; object-fit: contain; }
    .header-bar { display: grid; grid-template-columns: 1fr auto 1fr; align-items: center; gap: var(--space-4); }
    .segmented { display: inline-flex; gap: var(--space-6); }
    .seg-btn { text-decoration: none; color: var(--muted); font-weight: 700; padding: 6px 0; border-bottom: 2px solid transparent; }
    .seg-btn.active, .seg-btn:hover { color: var(--text); border-bottom-color: currentColor; }

    .kiosk-main { padding: var(--space-8) 0; }
    .scanner-container { display:flex; flex-direction:column; align-items:center; justify-content:center; min-height: 65vh; background: #0b0f17; border: 1px solid var(--border); }
    .scanner-viewport { position: relative; width: min(520px, 86vw); aspect-ratio: 3/4; background:#000; }
    .scanner-viewport video { width:100%; height:100%; object-fit:cover; }
    .scanner-overlay { position:absolute; inset:0; pointer-events:none; }
    .scanner-frame { position:absolute; top:50%; left:50%; transform:translate(-50%, -50%); width: 70%; aspect-ratio: 1; border: 3px solid #fff; border-radius: 12px; }
    .scanner-info { color:#fff; text-align:center; margin-top: var(--space-6); }
  </style>

  <script>
    const SANITY_PROJECT_ID = "{import.meta.env.PUBLIC_SANITY_PROJECT_ID || '832k5je1'}";
    const SANITY_DATASET = "{import.meta.env.PUBLIC_SANITY_DATASET || 'production'}";
    let qrScanner;
    async function startScanner() {
      const video = document.getElementById('scanner-video');
      if (!video) return;
      try {
        const { default: QrScanner } = await import('qr-scanner');
        if (!qrScanner) {
          qrScanner = new QrScanner(
            video,
            async (result) => {
              const text = (result && (result.data || result)) ? (result.data || String(result)) : '';
              if (!text) return;
              try {
                try { const u = new URL(text); window.location.href = u.href; return; } catch {}
                const groq = '*[_type=="exponat" && qr_code.current == $code][0]{_id}';
                const api = `https://${SANITY_PROJECT_ID}.api.sanity.io/v1/data/query/${SANITY_DATASET}?query=${encodeURIComponent(groq)}&$code=${encodeURIComponent(text)}`;
                const res = await fetch(api);
                const data = await res.json();
                const id = data && data.result && data.result._id;
                if (id) window.location.href = `/exponat/${id}`; else alert('Kein Exponat gefunden.');
              } catch (err) { console.error('QR-Verarbeitung fehlgeschlagen', err); alert('QR-Code konnte nicht verarbeitet werden.'); }
              finally { stopScanner(); }
            },
            { preferredCamera: 'environment', highlightScanRegion: true, highlightCodeOutline: true }
          );
        }
        await qrScanner.start();
      } catch (e) {
        console.warn('qr-scanner Import/Start fehlgeschlagen, versuche BarcodeDetector', e);
        try {
          if ('BarcodeDetector' in window) {
            const constraints = { video: { facingMode: 'environment' } };
            const stream = await navigator.mediaDevices.getUserMedia(constraints);
            video.srcObject = stream; await video.play();
            const detector = new window.BarcodeDetector({ formats: ['qr_code'] });
            const scan = async () => {
              if (video.readyState === HTMLMediaElement.HAVE_ENOUGH_DATA) {
                try {
                  const barcodes = await detector.detect(video);
                  const code = barcodes?.[0]?.rawValue;
                  if (code) {
                    try { const u = new URL(code); window.location.href = u.href; return; } catch {}
                    const groq = '*[_type=="exponat" && qr_code.current == $code][0]{_id}';
                    const api = `https://${SANITY_PROJECT_ID}.api.sanity.io/v1/data/query/${SANITY_DATASET}?query=${encodeURIComponent(groq)}&$code=${encodeURIComponent(code)}`;
                    const res = await fetch(api);
                    const data = await res.json();
                    const id = data && data.result && data.result._id;
                    if (id) window.location.href = `/exponat/${id}`; else alert('Kein Exponat gefunden.');
                    return;
                  }
                } catch {}
              }
              requestAnimationFrame(scan);
            };
            requestAnimationFrame(scan);
          } else {
            alert('QR-Scan wird von diesem Gerät/Browser nicht unterstützt.');
          }
        } catch (err) { console.error('BarcodeDetector fehlgeschlagen', err); alert('Kamera-Zugriff nicht möglich.'); }
      }
    }
    function stopScanner() { try { qrScanner && qrScanner.stop(); } catch {} }
    startScanner();
  </script>
</Layout>

