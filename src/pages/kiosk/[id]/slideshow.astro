---
import Layout from '../../../layouts/Layout.astro';
import { getKioskConfigByIdentifier, getMuseumInfo, getExponate, getExponateByIds } from '../../../lib/sanity';

export async function getStaticPaths() {
  return [];
}

const { id } = Astro.params;
const kioskConfig = await getKioskConfigByIdentifier(id).catch(() => null);
const museumInfo = await getMuseumInfo().catch(() => ({ name: 'Museum Digital' }));

let exponate = [];
try {
  const ss = kioskConfig?.konfiguration?.slideshow_settings;
  if (ss?.exponate && ss.exponate.length > 0) exponate = await getExponateByIds(ss.exponate);
  else exponate = await getExponate({ highlight: true, limit: 20 });
} catch { exponate = []; }

const pageTitle = `${kioskConfig?.name || id} – Slideshow`;
const theme = kioskConfig?.design?.theme || 'default';
---

<Layout title={pageTitle} theme={theme} idleHome={`/kiosk/${id}`}>
  <div class="slideshow-app" data-kiosk={id}>
    <main class="slideshow-main">
      <div class="slideshow-container">
        <div class="slideshow-track">
          {exponate.map((exponat, index) => (
            <div class="slide" data-slide={index}>
              <div class="slide-image">
                {exponat.hauptbild && (<img src={exponat.hauptbild} alt={exponat.titel} />)}
              </div>
              <div class="slide-info">
                <h2>{exponat.titel}</h2>
                {exponat.inventarnummer && (<p class="inv-nr">{exponat.inventarnummer}</p>)}
                {exponat.kurzbeschreibung && (<p>{exponat.kurzbeschreibung}</p>)}
              </div>
            </div>
          ))}
        </div>
        <div class="slideshow-controls">
          <button class="prev-btn" aria-label="Vorherige Folie">←</button>
          <button class="play-pause-btn" aria-label="Pause">⏸</button>
          <button class="next-btn" aria-label="Nächste Folie">→</button>
        </div>
        <div class="slideshow-dots">
          {exponate.map((_, index) => (<span class="dot" data-dot={index}></span>))}
        </div>
      </div>
    </main>
  </div>

  <style>
    .slideshow-app { background: #0b0f17; min-height: 100vh; color: #fff; }
    .slideshow-main { min-height: 100vh; display: grid; place-items: center; padding: 16px; }
    .slideshow-container { width: 100%; max-width: 1600px; }
    .slideshow-track { position: relative; width: 100%; height: min(80vh, 70vw); }
    .slide { position: absolute; inset: 0; display: flex; gap: 3rem; align-items: center; opacity: 0; transition: opacity 1s; }
    .slide.active { opacity: 1; }
    .slide-image { flex: 1; height: 100%; }
    .slide-image img { width: 100%; height: 100%; object-fit: contain; }
    .slide-info { flex: 1; color: #fff; }
    .slide-info h2 { font-size: clamp(1.5rem, 3vw, 2.5rem); margin-bottom: 1rem; }
    .slideshow-controls { display: flex; gap: 1rem; margin-top: 2rem; }
    .slideshow-controls button { width: 44px; height: 44px; border: 1px solid var(--border); background: transparent; }
    .slideshow-dots { display: flex; gap: 8px; margin-top: .5rem; }
    .dot { width: 6px; height: 6px; border-radius: 50%; background: #cbd5e1; }
    .dot.active { background: #111827; }
  </style>

  <script>
    let slideshowInterval;
    let currentSlide = 0;
    const slides = document.querySelectorAll('.slide');
    const dots = document.querySelectorAll('.dot');
    function showSlide(index) { slides.forEach(s => s.classList.remove('active')); dots.forEach(d => d.classList.remove('active')); if (slides[index]) slides[index].classList.add('active'); if (dots[index]) dots[index].classList.add('active'); currentSlide = index; }
    function nextSlide() { currentSlide = (currentSlide + 1) % (slides.length || 1); showSlide(currentSlide); }
    function prevSlide() { currentSlide = (currentSlide - 1 + (slides.length || 1)) % (slides.length || 1); showSlide(currentSlide); }
    function startSlideshow() { if (!slides || slides.length === 0) return; showSlide(0); slideshowInterval = setInterval(nextSlide, 10000); }
    function stopSlideshow() { clearInterval(slideshowInterval); }
    document.querySelector('.prev-btn')?.addEventListener('click', () => { stopSlideshow(); prevSlide(); });
    document.querySelector('.next-btn')?.addEventListener('click', () => { stopSlideshow(); nextSlide(); });
    document.querySelector('.play-pause-btn')?.addEventListener('click', (e) => { if (slideshowInterval) { stopSlideshow(); e.target.textContent = '▶'; } else { startSlideshow(); e.target.textContent = '⏸'; } });
    startSlideshow();
  </script>
</Layout>
