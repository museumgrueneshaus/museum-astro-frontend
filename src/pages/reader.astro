---
import Layout from '../layouts/Layout.astro';
import { getKioskConfig, getMuseumInfo } from '../lib/sanity';

const kioskConfig = await getKioskConfig('default').catch(() => null);
const museumInfo = await getMuseumInfo().catch(() => ({ name: 'Museum Digital' }));

const pageTitle = `${museumInfo?.name || 'Museum'} – Reader`;
const theme = kioskConfig?.design?.theme || 'default';
const defaultFile = kioskConfig?.konfiguration?.reader_settings?.pdf_url || '';
---

<Layout title={pageTitle} theme={theme}>
  <div class="kiosk-app" data-mode="reader">
    <header class="app-header">
      <div class="container header-bar">
        <div class="brand">
          {museumInfo?.logo && (<img src={museumInfo.logo} alt={museumInfo.name} class="brand-logo" />)}
          <div>
            <div class="brand-title">{museumInfo?.name || 'Museum'}</div>
            {museumInfo?.untertitel && (<div class="brand-subtitle">{museumInfo.untertitel}</div>)}
          </div>
        </div>
        <nav class="segmented" aria-label="Modi">
          <a href="/explorer" class="seg-btn">Entdecken</a>
          <a href="/slideshow" class="seg-btn">Slideshow</a>
          <a href="/reader" class="seg-btn active">Reader</a>
        </nav>
        <div></div>
      </div>
    </header>

    <main class="reader-main container" data-default-file={defaultFile}>
      <div class="reader-toolbar">
        <div class="controls-left">
          <button id="prev-page" aria-label="Vorherige Seite">←</button>
          <span class="page-indicator"><input id="page-input" type="number" min="1" value="1" /> <span id="page-sep">/</span> <span id="page-count">?</span></span>
          <button id="next-page" aria-label="Nächste Seite">→</button>
        </div>
        <div class="controls-right">
          <label class="spread"><input id="spread-toggle" type="checkbox" /> Doppelseite</label>
          <button id="fullscreen" aria-label="Vollbild">⤢ Vollbild</button>
        </div>
      </div>

      <div id="reader" class="reader-viewport">
        <div class="placeholder">
          <p>PDF auswählen: Parameter <code>?file=URL</code> in der Adresse angeben oder in der Kiosk-Konfiguration <code>reader_settings.pdf_url</code> setzen.</p>
        </div>
      </div>
    </main>
  </div>

  <style>
    .header-bar { display: grid; grid-template-columns: 1fr auto 1fr; align-items: center; gap: var(--space-4); }
    .segmented { display: inline-flex; gap: var(--space-6); }
    .seg-btn { text-decoration: none; color: var(--muted); font-weight: 700; padding: 6px 0; border-bottom: 2px solid transparent; }
    .seg-btn.active, .seg-btn:hover { color: var(--text); border-bottom-color: currentColor; }

    .reader-main { padding: var(--space-6) 0 var(--space-10); }
    .reader-toolbar { display:flex; justify-content: space-between; align-items: center; gap: 1rem; margin-bottom: var(--space-4); }
    .controls-left, .controls-right { display:flex; align-items:center; gap: .75rem; }
    .reader-viewport { border: 1px solid var(--border); min-height: 70vh; background: #fff; display:grid; place-items:center; }
    .reader-frame { width: 100%; height: 80vh; border: 0; }
    .spread-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 1px; background: var(--border); }
    .spread-grid .reader-frame { height: 80vh; }
    .page-indicator input { width: 5ch; text-align: right; border: 0; border-bottom: 1px solid var(--border); background: transparent; padding: 2px 4px; }
    .placeholder { color: var(--muted); text-align: center; padding: var(--space-10); }
    @media (max-width: 900px) { .spread { display:none; } }
  </style>

  <script>
    const container = document.querySelector('.reader-main');
    const defaultFile = container?.getAttribute('data-default-file') || '';
    const params = new URLSearchParams(location.search);
    const fileParam = params.get('file') || defaultFile;
    let page = Math.max(1, parseInt(params.get('page') || '1', 10));
    let spread = params.get('spread') === '1';

    const reader = document.getElementById('reader');
    const prevBtn = document.getElementById('prev-page');
    const nextBtn = document.getElementById('next-page');
    const pageInput = document.getElementById('page-input');
    const pageCount = document.getElementById('page-count');
    const spreadToggle = document.getElementById('spread-toggle');
    const fullscreenBtn = document.getElementById('fullscreen');

    function buildSrc(file, p) {
      // Use fragment to control page in most built-in PDF viewers
      const hash = `#page=${p}&view=FitH`;
      return `${file}${file.includes('#') ? '' : hash}`;
    }

    function render() {
      reader.innerHTML = '';
      if (!fileParam) {
        reader.innerHTML = '<div class="placeholder"><p>Kein PDF angegeben.</p></div>';
        return;
      }
      const frame = document.createElement('iframe');
      frame.className = 'reader-frame';
      frame.src = buildSrc(fileParam, page);
      if (spread && window.innerWidth > 900) {
        const frame2 = document.createElement('iframe');
        frame2.className = 'reader-frame';
        frame2.src = buildSrc(fileParam, page + 1);
        const wrap = document.createElement('div');
        wrap.className = 'spread-grid';
        wrap.appendChild(frame);
        wrap.appendChild(frame2);
        reader.appendChild(wrap);
      } else {
        reader.appendChild(frame);
      }
      pageInput.value = String(page);
    }

    function updateUrl() {
      const url = new URL(location.href);
      url.searchParams.set('page', String(page));
      url.searchParams.set('spread', spread ? '1' : '0');
      history.replaceState(null, '', url);
    }

    prevBtn?.addEventListener('click', () => { page = Math.max(1, page - 1); render(); updateUrl(); });
    nextBtn?.addEventListener('click', () => { page = page + 1; render(); updateUrl(); });
    pageInput?.addEventListener('change', (e) => { const v = parseInt(e.target.value || '1', 10); page = isNaN(v) ? 1 : Math.max(1, v); render(); updateUrl(); });
    spreadToggle?.addEventListener('change', (e) => { spread = e.target.checked; render(); updateUrl(); });
    fullscreenBtn?.addEventListener('click', () => {
      const el = reader;
      if (document.fullscreenElement) document.exitFullscreen();
      else el.requestFullscreen?.();
    });

    // Initialize
    if (spreadToggle) spreadToggle.checked = spread;
    render();
  </script>
</Layout>
